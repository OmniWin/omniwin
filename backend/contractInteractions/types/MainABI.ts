/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AssetStruct = {
  token: AddressLike;
  tokenID: BigNumberish;
  amount: BigNumberish;
  assetType: BigNumberish;
  data: BytesLike;
};

export type AssetStructOutput = [
  token: string,
  tokenID: bigint,
  amount: bigint,
  assetType: bigint,
  data: string
] & {
  token: string;
  tokenID: bigint;
  amount: bigint;
  assetType: bigint;
  data: string;
};

export declare namespace IEesee {
  export type LotParamsStruct = {
    totalTickets: BigNumberish;
    ticketPrice: BigNumberish;
    duration: BigNumberish;
    owner: AddressLike;
    signer: AddressLike;
    signatureData: BytesLike;
  };

  export type LotParamsStructOutput = [
    totalTickets: bigint,
    ticketPrice: bigint,
    duration: bigint,
    owner: string,
    signer: string,
    signatureData: string
  ] & {
    totalTickets: bigint;
    ticketPrice: bigint;
    duration: bigint;
    owner: string;
    signer: string;
    signatureData: string;
  };
}

export interface MainABIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ESE"
      | "accessManager"
      | "buyTickets"
      | "callExternal"
      | "changeFee"
      | "changeMaxDuration"
      | "changeMinDuration"
      | "createLots"
      | "createLotsAndBuyTickets"
      | "eip712Domain"
      | "fee"
      | "feeSplitter"
      | "getBuyTicketsRecipient"
      | "getLotBonusTicketsHeldByAddress"
      | "getLotTicketHolder"
      | "getLotTicketsHeldByAddress"
      | "getLotsLength"
      | "getTrustedForwarder"
      | "isTrustedForwarder"
      | "lots"
      | "maxDuration"
      | "minDuration"
      | "multicall"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "random"
      | "receiveAssets"
      | "receiveTokens"
      | "reclaimAssets"
      | "reclaimTokens"
      | "staking"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyTickets"
      | "ChangeFee"
      | "ChangeMaxDuration"
      | "ChangeMinDuration"
      | "CollectFee"
      | "CollectRoyalty"
      | "ConsumeNonce"
      | "CreateLot"
      | "EIP712DomainChanged"
      | "ReceiveAsset"
      | "ReceiveTokens"
      | "ReclaimAsset"
      | "ReclaimTokens"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ESE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTickets",
    values: [BigNumberish[], BigNumberish[], AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callExternal",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLots",
    values: [AssetStruct[], IEesee.LotParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createLotsAndBuyTickets",
    values: [
      AssetStruct[],
      IEesee.LotParamsStruct[],
      BigNumberish[],
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeSplitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyTicketsRecipient",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotBonusTicketsHeldByAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotTicketHolder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotTicketsHeldByAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lots", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "maxDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "random", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveAssets",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveTokens",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimAssets",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimTokens",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ESE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLotsAndBuyTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyTicketsRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotBonusTicketsHeldByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotTicketHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotTicketsHeldByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "random", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace BuyTicketsEvent {
  export type InputTuple = [
    ID: BigNumberish,
    recipient: AddressLike,
    lowerBound: BigNumberish,
    ticketAmount: BigNumberish,
    tokensSpent: BigNumberish,
    bonusTickets: BigNumberish
  ];
  export type OutputTuple = [
    ID: bigint,
    recipient: string,
    lowerBound: bigint,
    ticketAmount: bigint,
    tokensSpent: bigint,
    bonusTickets: bigint
  ];
  export interface OutputObject {
    ID: bigint;
    recipient: string;
    lowerBound: bigint;
    ticketAmount: bigint;
    tokensSpent: bigint;
    bonusTickets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeFeeEvent {
  export type InputTuple = [previousFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [previousFee: bigint, newFee: bigint];
  export interface OutputObject {
    previousFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeMaxDurationEvent {
  export type InputTuple = [
    previousMaxDuration: BigNumberish,
    newMaxDuration: BigNumberish
  ];
  export type OutputTuple = [
    previousMaxDuration: bigint,
    newMaxDuration: bigint
  ];
  export interface OutputObject {
    previousMaxDuration: bigint;
    newMaxDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeMinDurationEvent {
  export type InputTuple = [
    previousMinDuration: BigNumberish,
    newMinDuration: BigNumberish
  ];
  export type OutputTuple = [
    previousMinDuration: bigint,
    newMinDuration: bigint
  ];
  export interface OutputObject {
    previousMinDuration: bigint;
    newMinDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectFeeEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectRoyaltyEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsumeNonceEvent {
  export type InputTuple = [
    ID: BigNumberish,
    signer: AddressLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [ID: bigint, signer: string, nonce: bigint];
  export interface OutputObject {
    ID: bigint;
    signer: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateLotEvent {
  export type InputTuple = [
    ID: BigNumberish,
    asset: AssetStruct,
    signer: AddressLike,
    owner: AddressLike,
    totalTickets: BigNumberish,
    ticketPrice: BigNumberish,
    endTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    ID: bigint,
    asset: AssetStructOutput,
    signer: string,
    owner: string,
    totalTickets: bigint,
    ticketPrice: bigint,
    endTimestamp: bigint
  ];
  export interface OutputObject {
    ID: bigint;
    asset: AssetStructOutput;
    signer: string;
    owner: string;
    totalTickets: bigint;
    ticketPrice: bigint;
    endTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveAssetEvent {
  export type InputTuple = [
    ID: BigNumberish,
    winner: AddressLike,
    recipient: AddressLike,
    asset: AssetStruct
  ];
  export type OutputTuple = [
    ID: bigint,
    winner: string,
    recipient: string,
    asset: AssetStructOutput
  ];
  export interface OutputObject {
    ID: bigint;
    winner: string;
    recipient: string;
    asset: AssetStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveTokensEvent {
  export type InputTuple = [
    ID: BigNumberish,
    claimer: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    ID: bigint,
    claimer: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    ID: bigint;
    claimer: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReclaimAssetEvent {
  export type InputTuple = [
    ID: BigNumberish,
    owner: AddressLike,
    recipient: AddressLike,
    asset: AssetStruct
  ];
  export type OutputTuple = [
    ID: bigint,
    owner: string,
    recipient: string,
    asset: AssetStructOutput
  ];
  export interface OutputObject {
    ID: bigint;
    owner: string;
    recipient: string;
    asset: AssetStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReclaimTokensEvent {
  export type InputTuple = [
    ID: BigNumberish,
    claimer: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    ID: bigint,
    claimer: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    ID: bigint;
    claimer: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MainABI extends BaseContract {
  connect(runner?: ContractRunner | null): MainABI;
  waitForDeployment(): Promise<this>;

  interface: MainABIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ESE: TypedContractMethod<[], [string], "view">;

  accessManager: TypedContractMethod<[], [string], "view">;

  buyTickets: TypedContractMethod<
    [
      IDs: BigNumberish[],
      amounts: BigNumberish[],
      recipient: AddressLike,
      permit: BytesLike
    ],
    [bigint],
    "payable"
  >;

  callExternal: TypedContractMethod<
    [to: AddressLike, data: BytesLike],
    [string],
    "payable"
  >;

  changeFee: TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;

  changeMaxDuration: TypedContractMethod<
    [_maxDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeMinDuration: TypedContractMethod<
    [_minDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  createLots: TypedContractMethod<
    [assets: AssetStruct[], params: IEesee.LotParamsStruct[]],
    [bigint[]],
    "payable"
  >;

  createLotsAndBuyTickets: TypedContractMethod<
    [
      assets: AssetStruct[],
      params: IEesee.LotParamsStruct[],
      amounts: BigNumberish[],
      recipient: AddressLike,
      permit: BytesLike
    ],
    [[bigint[], bigint] & { IDs: bigint[]; tokensSpent: bigint }],
    "payable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  fee: TypedContractMethod<[], [bigint], "view">;

  feeSplitter: TypedContractMethod<[], [string], "view">;

  getBuyTicketsRecipient: TypedContractMethod<
    [ID: BigNumberish, transaction: BigNumberish],
    [string],
    "view"
  >;

  getLotBonusTicketsHeldByAddress: TypedContractMethod<
    [ID: BigNumberish, _address: AddressLike],
    [bigint],
    "view"
  >;

  getLotTicketHolder: TypedContractMethod<
    [ID: BigNumberish, ticket: BigNumberish],
    [string],
    "view"
  >;

  getLotTicketsHeldByAddress: TypedContractMethod<
    [ID: BigNumberish, _address: AddressLike],
    [bigint],
    "view"
  >;

  getLotsLength: TypedContractMethod<[], [bigint], "view">;

  getTrustedForwarder: TypedContractMethod<[], [string], "view">;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  lots: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        AssetStructOutput
      ] & {
        totalTickets: bigint;
        bonusTickets: bigint;
        ticketsBought: bigint;
        ticketPrice: bigint;
        transactions: bigint;
        endTimestamp: bigint;
        fee: bigint;
        closed: boolean;
        buyout: boolean;
        assetClaimed: boolean;
        tokensClaimed: boolean;
        owner: string;
        asset: AssetStructOutput;
      }
    ],
    "view"
  >;

  maxDuration: TypedContractMethod<[], [bigint], "view">;

  minDuration: TypedContractMethod<[], [bigint], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  random: TypedContractMethod<[], [string], "view">;

  receiveAssets: TypedContractMethod<
    [IDs: BigNumberish[], recipient: AddressLike],
    [AssetStructOutput[]],
    "payable"
  >;

  receiveTokens: TypedContractMethod<
    [IDs: BigNumberish[], recipient: AddressLike],
    [bigint],
    "payable"
  >;

  reclaimAssets: TypedContractMethod<
    [IDs: BigNumberish[], recipient: AddressLike],
    [AssetStructOutput[]],
    "payable"
  >;

  reclaimTokens: TypedContractMethod<
    [IDs: BigNumberish[], recipient: AddressLike],
    [bigint],
    "payable"
  >;

  staking: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ESE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accessManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyTickets"
  ): TypedContractMethod<
    [
      IDs: BigNumberish[],
      amounts: BigNumberish[],
      recipient: AddressLike,
      permit: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "callExternal"
  ): TypedContractMethod<
    [to: AddressLike, data: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "changeFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMaxDuration"
  ): TypedContractMethod<[_maxDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMinDuration"
  ): TypedContractMethod<[_minDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLots"
  ): TypedContractMethod<
    [assets: AssetStruct[], params: IEesee.LotParamsStruct[]],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createLotsAndBuyTickets"
  ): TypedContractMethod<
    [
      assets: AssetStruct[],
      params: IEesee.LotParamsStruct[],
      amounts: BigNumberish[],
      recipient: AddressLike,
      permit: BytesLike
    ],
    [[bigint[], bigint] & { IDs: bigint[]; tokensSpent: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeSplitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBuyTicketsRecipient"
  ): TypedContractMethod<
    [ID: BigNumberish, transaction: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLotBonusTicketsHeldByAddress"
  ): TypedContractMethod<
    [ID: BigNumberish, _address: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLotTicketHolder"
  ): TypedContractMethod<
    [ID: BigNumberish, ticket: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLotTicketsHeldByAddress"
  ): TypedContractMethod<
    [ID: BigNumberish, _address: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLotsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTrustedForwarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lots"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        AssetStructOutput
      ] & {
        totalTickets: bigint;
        bonusTickets: bigint;
        ticketsBought: bigint;
        ticketPrice: bigint;
        transactions: bigint;
        endTimestamp: bigint;
        fee: bigint;
        closed: boolean;
        buyout: boolean;
        assetClaimed: boolean;
        tokensClaimed: boolean;
        owner: string;
        asset: AssetStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "random"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveAssets"
  ): TypedContractMethod<
    [IDs: BigNumberish[], recipient: AddressLike],
    [AssetStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "receiveTokens"
  ): TypedContractMethod<
    [IDs: BigNumberish[], recipient: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "reclaimAssets"
  ): TypedContractMethod<
    [IDs: BigNumberish[], recipient: AddressLike],
    [AssetStructOutput[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "reclaimTokens"
  ): TypedContractMethod<
    [IDs: BigNumberish[], recipient: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "staking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "BuyTickets"
  ): TypedContractEvent<
    BuyTicketsEvent.InputTuple,
    BuyTicketsEvent.OutputTuple,
    BuyTicketsEvent.OutputObject
  >;
  getEvent(
    key: "ChangeFee"
  ): TypedContractEvent<
    ChangeFeeEvent.InputTuple,
    ChangeFeeEvent.OutputTuple,
    ChangeFeeEvent.OutputObject
  >;
  getEvent(
    key: "ChangeMaxDuration"
  ): TypedContractEvent<
    ChangeMaxDurationEvent.InputTuple,
    ChangeMaxDurationEvent.OutputTuple,
    ChangeMaxDurationEvent.OutputObject
  >;
  getEvent(
    key: "ChangeMinDuration"
  ): TypedContractEvent<
    ChangeMinDurationEvent.InputTuple,
    ChangeMinDurationEvent.OutputTuple,
    ChangeMinDurationEvent.OutputObject
  >;
  getEvent(
    key: "CollectFee"
  ): TypedContractEvent<
    CollectFeeEvent.InputTuple,
    CollectFeeEvent.OutputTuple,
    CollectFeeEvent.OutputObject
  >;
  getEvent(
    key: "CollectRoyalty"
  ): TypedContractEvent<
    CollectRoyaltyEvent.InputTuple,
    CollectRoyaltyEvent.OutputTuple,
    CollectRoyaltyEvent.OutputObject
  >;
  getEvent(
    key: "ConsumeNonce"
  ): TypedContractEvent<
    ConsumeNonceEvent.InputTuple,
    ConsumeNonceEvent.OutputTuple,
    ConsumeNonceEvent.OutputObject
  >;
  getEvent(
    key: "CreateLot"
  ): TypedContractEvent<
    CreateLotEvent.InputTuple,
    CreateLotEvent.OutputTuple,
    CreateLotEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveAsset"
  ): TypedContractEvent<
    ReceiveAssetEvent.InputTuple,
    ReceiveAssetEvent.OutputTuple,
    ReceiveAssetEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveTokens"
  ): TypedContractEvent<
    ReceiveTokensEvent.InputTuple,
    ReceiveTokensEvent.OutputTuple,
    ReceiveTokensEvent.OutputObject
  >;
  getEvent(
    key: "ReclaimAsset"
  ): TypedContractEvent<
    ReclaimAssetEvent.InputTuple,
    ReclaimAssetEvent.OutputTuple,
    ReclaimAssetEvent.OutputObject
  >;
  getEvent(
    key: "ReclaimTokens"
  ): TypedContractEvent<
    ReclaimTokensEvent.InputTuple,
    ReclaimTokensEvent.OutputTuple,
    ReclaimTokensEvent.OutputObject
  >;

  filters: {
    "BuyTickets(uint256,address,uint32,uint32,uint96,uint32)": TypedContractEvent<
      BuyTicketsEvent.InputTuple,
      BuyTicketsEvent.OutputTuple,
      BuyTicketsEvent.OutputObject
    >;
    BuyTickets: TypedContractEvent<
      BuyTicketsEvent.InputTuple,
      BuyTicketsEvent.OutputTuple,
      BuyTicketsEvent.OutputObject
    >;

    "ChangeFee(uint32,uint32)": TypedContractEvent<
      ChangeFeeEvent.InputTuple,
      ChangeFeeEvent.OutputTuple,
      ChangeFeeEvent.OutputObject
    >;
    ChangeFee: TypedContractEvent<
      ChangeFeeEvent.InputTuple,
      ChangeFeeEvent.OutputTuple,
      ChangeFeeEvent.OutputObject
    >;

    "ChangeMaxDuration(uint64,uint64)": TypedContractEvent<
      ChangeMaxDurationEvent.InputTuple,
      ChangeMaxDurationEvent.OutputTuple,
      ChangeMaxDurationEvent.OutputObject
    >;
    ChangeMaxDuration: TypedContractEvent<
      ChangeMaxDurationEvent.InputTuple,
      ChangeMaxDurationEvent.OutputTuple,
      ChangeMaxDurationEvent.OutputObject
    >;

    "ChangeMinDuration(uint64,uint64)": TypedContractEvent<
      ChangeMinDurationEvent.InputTuple,
      ChangeMinDurationEvent.OutputTuple,
      ChangeMinDurationEvent.OutputObject
    >;
    ChangeMinDuration: TypedContractEvent<
      ChangeMinDurationEvent.InputTuple,
      ChangeMinDurationEvent.OutputTuple,
      ChangeMinDurationEvent.OutputObject
    >;

    "CollectFee(address,uint96)": TypedContractEvent<
      CollectFeeEvent.InputTuple,
      CollectFeeEvent.OutputTuple,
      CollectFeeEvent.OutputObject
    >;
    CollectFee: TypedContractEvent<
      CollectFeeEvent.InputTuple,
      CollectFeeEvent.OutputTuple,
      CollectFeeEvent.OutputObject
    >;

    "CollectRoyalty(address,uint96)": TypedContractEvent<
      CollectRoyaltyEvent.InputTuple,
      CollectRoyaltyEvent.OutputTuple,
      CollectRoyaltyEvent.OutputObject
    >;
    CollectRoyalty: TypedContractEvent<
      CollectRoyaltyEvent.InputTuple,
      CollectRoyaltyEvent.OutputTuple,
      CollectRoyaltyEvent.OutputObject
    >;

    "ConsumeNonce(uint256,address,uint256)": TypedContractEvent<
      ConsumeNonceEvent.InputTuple,
      ConsumeNonceEvent.OutputTuple,
      ConsumeNonceEvent.OutputObject
    >;
    ConsumeNonce: TypedContractEvent<
      ConsumeNonceEvent.InputTuple,
      ConsumeNonceEvent.OutputTuple,
      ConsumeNonceEvent.OutputObject
    >;

    "CreateLot(uint256,tuple,address,address,uint32,uint96,uint32)": TypedContractEvent<
      CreateLotEvent.InputTuple,
      CreateLotEvent.OutputTuple,
      CreateLotEvent.OutputObject
    >;
    CreateLot: TypedContractEvent<
      CreateLotEvent.InputTuple,
      CreateLotEvent.OutputTuple,
      CreateLotEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ReceiveAsset(uint256,address,address,tuple)": TypedContractEvent<
      ReceiveAssetEvent.InputTuple,
      ReceiveAssetEvent.OutputTuple,
      ReceiveAssetEvent.OutputObject
    >;
    ReceiveAsset: TypedContractEvent<
      ReceiveAssetEvent.InputTuple,
      ReceiveAssetEvent.OutputTuple,
      ReceiveAssetEvent.OutputObject
    >;

    "ReceiveTokens(uint256,address,address,uint96)": TypedContractEvent<
      ReceiveTokensEvent.InputTuple,
      ReceiveTokensEvent.OutputTuple,
      ReceiveTokensEvent.OutputObject
    >;
    ReceiveTokens: TypedContractEvent<
      ReceiveTokensEvent.InputTuple,
      ReceiveTokensEvent.OutputTuple,
      ReceiveTokensEvent.OutputObject
    >;

    "ReclaimAsset(uint256,address,address,tuple)": TypedContractEvent<
      ReclaimAssetEvent.InputTuple,
      ReclaimAssetEvent.OutputTuple,
      ReclaimAssetEvent.OutputObject
    >;
    ReclaimAsset: TypedContractEvent<
      ReclaimAssetEvent.InputTuple,
      ReclaimAssetEvent.OutputTuple,
      ReclaimAssetEvent.OutputObject
    >;

    "ReclaimTokens(uint256,address,address,uint96)": TypedContractEvent<
      ReclaimTokensEvent.InputTuple,
      ReclaimTokensEvent.OutputTuple,
      ReclaimTokensEvent.OutputObject
    >;
    ReclaimTokens: TypedContractEvent<
      ReclaimTokensEvent.InputTuple,
      ReclaimTokensEvent.OutputTuple,
      ReclaimTokensEvent.OutputObject
    >;
  };
}
