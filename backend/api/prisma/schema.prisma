generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:327TFg8qGjnrBi@localhost:3306/omniwin"
}

model Raffles {
  id                    Int                     @id
  chainId               Int                     @map("chain_id")
  status                RaffleStatus
  assetType             String                  @map("asset_type")
  prizeAddress          String                  @map("prize_address")
  prizeNumber           Float                   @map("prize_number")
  blockTimestamp        DateTime                @map("block_timestamp")
  ownerAddress          String                  @map("owner_address")
  minFundsToRaise       Int                     @map("min_funds_to_raise")
  countViews            Int                     @map("count_views")
  winnerAddress         String?                 @map("winner_address")
  claimedPrize          Boolean                 @map("claimed_prize")
  tickets               Tickets[]
  blockchainEvents      BlockchainEvents[]
  sidechainEnabledRaffles SidechainEnabledRaffles[] 
  raffleMetadataId      RaffleMetadata?
  priceList             PriceList?

  @@map("raffles")
}

model SidechainEnabledRaffles {
  id                  Int   @id @default(autoincrement())
  raffleId            Int                                   @map("raffle_id")
  chainId             Int                                   @map("chain_id")
  status              SidechainRaffleStatus
  raffle              Raffles @relation(fields: [raffleId], references: [id])

  @@unique([raffleId, chainId])
  @@map("sidechain_enabled_raffles")
}

model BlockchainEvents {
  id                  String    @id
  raffleId            Int                           @map("raffle_id")
  name                String
  json                Json      @default("{}")
  statusParsing       String                        @map("status_parsing")
  statusMessage       String?                       @map("status_message")
  createdAt           DateTime                      @map("created_at")
  raffle              Raffles   @relation(fields: [raffleId], references: [id])

  @@map("blockchain_events")
}

model RaffleMetadata {
  id                  Int       @id @default(autoincrement())                     @map("id")
  raffleId            Int       @unique                                           @map("raffle_id")
  raffle              Raffles   @relation(fields: [raffleId], references: [id])
  json                Json?     @default("{}")
  name                String?
  description         String?
  imageUrl            String?                                                     @map("image_url")
  imageCid            String?                                                     @map("image_cid")
  status              String
  collectionName      String?                                                     @map("collection_name")
  statusMessage       String?                                                     @map("status_message")

  @@map("raffle_metadata")
}

model PriceList {
  id                  Int       @id @default(autoincrement())       @map("id")
  raffleId            Int       @unique                             @map("raffle_id")
  raffle              Raffles   @relation(fields: [raffleId], references: [id])
  eventId             Int                                           @map("event_id")
  prices              Json

  @@map("price_list")
}

model Tickets {
  tx                  String    @id
  eventId             String            @map("event_id")
  chainId             Int               @map("chain_id")
  raffleId            Int               @map("raffle_id")
  buyerAddress        String            @map("buyer_address")
  numberOfEntries     Int               @map("number_of_entries")
  valueOfTickets      Int               @map("value_of_tickets")
  totalEntriesBought  Int               @map("total_entries_bought")
  totalRaisedAmount   Int               @map("total_raised_amount")
  claimed             Boolean           @map("claimed")
  blockNumber         Int               @map("block_number")
  blockTimestamp      DateTime          @map("block_timestamp")
  hasArrived          Boolean           @map("has_arrived")
  raffle              Raffles?  @relation(fields: [raffleId], references: [id])

  @@map("tickets")
}

model User {
  id                 Int       @id @default(autoincrement())
  chainId            Int                                        @map("chain_id")
  username           String?   @unique
  email              String?   @unique
  address            String    @unique
  description        String?   @db.VarChar(600)
  avatar             String?   @default("")
  telegram           Json?     @default("{}")
  twitter            Json?     @default("{}")
  discord            Json?     @default("{}")
  referralCode       String?   @unique @map("referral_code")
  issuedAt           DateTime?                                  @map("issued_at")
  createdAt          DateTime  @default(now())                  @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt       @map("updated_at")
  referral           Referral[]
  seasonLeaderboard  SeasonLeaderboard[] 
  userQuests         UserQuests[] 
  userQuestSteps     UserQuestSteps[] 

  @@index([username])
  @@index([email])
  @@map("users")
}

model Referral {
  id              Int      @id @default(autoincrement())
  referredUserId  Int                                       @map("referred_user_id")
  referralCode    String                                    @map("refferal_code")
  createdAt       DateTime @default(now())                  @map("created_at")
  user            User     @relation(fields: [referredUserId], references: [id])

  @@map("referrals")
}

model Favorites {
  id           Int      @id @default(autoincrement())
  lotId        Int                                      @map("lot_id")
  userId       String                                   @map("user_id")
  createdAt    DateTime @default(now())                 @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt      @map("updated_at")

  @@unique([lotId, userId], map: "lot_id_lot_user")
  @@index([lotId], name: "id_lot")
  @@index([userId], name: "id_user")
  @@map("favorites")
}

model Season {
  id                  Int         @id @default(autoincrement())   @map("id")
  name                String
  subTitle            String?                                     @map("sub_title")
  description         String?     @db.Text
  xpLimit             Int                                         @map("xp_limit")
  startDate           DateTime?                                   @map("start_date")
  endDate             DateTime?                                   @map("end_date")
  createdAt           DateTime    @default(now())                 @map("created_at")
  updatedAt           DateTime    @default(now()) @updatedAt      @map("updated_at")
  quests              Quest[]
  seasonLeaderboards  SeasonLeaderboard[]

  @@index([name])
  @@map("seasons")
}

model SeasonLeaderboard {
  id               Int         @id @default(autoincrement())    @map("id")
  seasonId         Int                                          @map("season_id")
  userId           Int                                          @map("user_id")
  xpPoints         Int                                          @map("xp_points")
  createdAt        DateTime    @default(now())                  @map("created_at")
  updatedAt        DateTime    @default(now()) @updatedAt       @map("updated_at")
  season           Season      @relation(fields: [seasonId], references: [id])
  user             User        @relation(fields: [userId], references: [id])

  @@unique([seasonId, userId], map: "season_id_user_id")
  @@index([seasonId])
  @@index([userId])
  @@map("season_leaderboard")
}

model Quest {
  id               Int                 @id @default(autoincrement())      @map("id")
  seasonId         Int                                                    @map("season_id")
  name             String
  description      String?             @db.Text
  xpReward         Int                                                    @map("xp_reward")
  createdAt        DateTime            @default(now())                    @map("created_at")
  updatedAt        DateTime            @default(now()) @updatedAt         @map("updated_at")
  steps            Step[]
  userQuests       UserQuests[]
  userQuestSteps   UserQuestSteps[]
  season           Season              @relation(fields: [seasonId], references: [id])

  @@index([seasonId])
  @@map("quests")
}

model Step {
  id               Int         @id @default(autoincrement())      @map("id")
  questId          Int                                            @map("quest_id")
  description      String?     @db.Text
  xpPoints         Int                                            @map("xp_points")
  createdAt        DateTime    @default(now())                    @map("created_at")
  updatedAt        DateTime    @default(now()) @updatedAt         @map("updated_at")
  quest            Quest       @relation(fields: [questId], references: [id])
  userQuestSteps   UserQuestSteps[]

  @@index([questId])
  @@map("steps")
}

model UserQuests {
  userId          Int
  questId         Int
  status          Int
  createdAt       DateTime    @default(now())                   @map("created_at")
  updatedAt       DateTime    @default(now()) @updatedAt        @map("updated_at")
  user            User        @relation(fields: [userId], references: [id])
  quest           Quest       @relation(fields: [questId], references: [id])

  @@id([userId, questId])
  @@index([userId])
  @@index([questId])
  @@unique([userId, questId], map: "user_id_quest_id")
  @@map("user_quests")
}

model UserQuestSteps {
  userId           Int
  questId          Int
  stepId           Int
  status           Int
  createdAt        DateTime    @default(now())                  @map("created_at")
  updatedAt        DateTime    @default(now()) @updatedAt       @map("updated_at")
  user             User        @relation(fields: [userId], references: [id])
  quest            Quest       @relation(fields: [questId], references: [id])
  step             Step        @relation(fields: [stepId], references: [id])

  @@id([userId, questId])
  @@index([userId])
  @@index([questId])
  @@index([stepId])
  @@unique([userId, questId, stepId], map: "user_id_quest_id_step_id")
  @@map("user_quest_steps")
}

enum NFTMetadataStatus {
  ERROR
  FAILED
  SUCCESS
}

enum AssetType {
  ERC721
  ERC1155
  ERC20
  ERC777
  ERC1155ATOMIC
  ERC721ATOMIC
  ERC20ATOMIC
  ERC777ATOMIC
  ERC721ATOMICV2
  ERC1155ATOMICV2
  ERC20ATOMICV2
  ERC777ATOMICV2
  ERC721ATOMICV3
  ERC1155ATOMICV3
  ERC20ATOMICV3
  ERC777ATOMICV3
}

enum NetworkType {
  ETHEREUM
  GOERLI
}

enum SidechainRaffleStatus {
  PENDING               @map("pending")                 // First event sent from main when the user wants to activate on another chain
  CREATED               @map("created")                 // Sent when the event is created on the sidechain
  PENDING_TIME_EXCEEDED @map("pending_time_exceeded")   // Set by a cron job if it has stayed in pending for X time
  MONEY_NOT_RAISED      @map("money_not_raised")        // Minimum amount of money not raised → can claim
  WINNER_SET            @map("winner_set")              // Can only claim money after this
}

enum StatusParsing {
  SUCCES               @map("succes")                
  FAILED               @map("failed")     
}

enum RaffleStatus {
  MONEY_RAISED      @map("money_raised")        // Money has been successfully raised
  MONEY_NOT_RAISED  @map("money_not_raised")    // Minimum amount of money not raised, can claim
  WINNER_SET        @map("winner_set")          // Winner has been set, can claim money
}
