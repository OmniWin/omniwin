generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Nft {
  id_nft         Int         @id @default(autoincrement())
  id_lot         Int         @unique
  total_tickets  Int         @default(0)
  bonus_tickets  Int         @default(0)
  tickets_bought Int         @default(0)
  ticket_price   BigInt
  transactions   Int         @default(0)
  end_timestamp  Int
  fee            Int         @default(600)
  closed         Boolean     @default(false)
  buyout         Boolean     @default(false)
  asset_claimed  Boolean     @default(false)
  tokens_claimed Boolean     @default(false)
  owner          String
  signer         String?
  token          String
  token_id       String
  amount         String
  asset_type     AssetType
  data           String
  network        NetworkType
  count_views    Int         @default(0)
  trending_score Int         @default(0)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now()) @updatedAt

  @@index([token, token_id], map: "token_tokenID")
}

model NftMetadata {
  id_nftMetadata  Int               @id @default(autoincrement())
  id_nft          Int               @unique
  id_lot          Int
  name            String?
  description     String?           @db.VarChar(2000)
  json            Json?
  image_url       String?
  image_local     String?
  status          NFTMetadataStatus
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt
  collection_name String?

  @@index([id_nft], map: "id_nft")
}

model Tickets {
  id_ticket        Int         @id @default(autoincrement())
  id_lot           Int
  unique_id        String      @unique
  recipient        String
  total_tickets    Int
  amount           BigInt
  bonus            Int
  created_at       DateTime    @default(now())
  updated_at       DateTime    @default(now()) @updatedAt
  tokens_spent     BigInt
  block            Int         @default(0)
  transaction_hash String      @default("")
  network          NetworkType @default(GOERLI)

  @@index([recipient], map: "recipient")
}

model User {
  id_user    String    @id @default(uuid())
  address    String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  email      String?   @unique
  username   String?   @unique
  issued_at  DateTime?
  chainId    Int
}

model Favorites {
  id_favorite Int      @id @default(autoincrement())
  id_lot      Int
  id_user     String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  @@unique([id_lot, id_user], map: "id_lot_id_user")
  @@index([id_lot], map: "id_lot")
  @@index([id_user], map: "id_user")
}

enum NFTMetadataStatus {
  ERROR
  FAILED
  SUCCESS
}

enum AssetType {
  ERC721
  ERC1155
  ERC20
  ERC777
  ERC1155ATOMIC
  ERC721ATOMIC
  ERC20ATOMIC
  ERC777ATOMIC
  ERC721ATOMICV2
  ERC1155ATOMICV2
  ERC20ATOMICV2
  ERC777ATOMICV2
  ERC721ATOMICV3
  ERC1155ATOMICV3
  ERC20ATOMICV3
  ERC777ATOMICV3
}

enum NetworkType {
  ETHEREUM
  GOERLI
}
